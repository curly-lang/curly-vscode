{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "scopeName": "source.curly",
    "patterns": [{"include": "#expression"}],
    "repository": {
        "expression": {
            "patterns": [
                {"include": "#other-keywords"},
                {"include": "#control-keywords"},
                
                {"include": "#constants"},
                {"include": "#string"},
                {"include": "#char"},
                {"include": "#numeric"},

                {"include": "#namespaces"},
                {"include": "#module-names"},
                {"include": "#variable-names"},

                {"include": "#purity-annotations"},

                {"include": "#type"},
                {"include": "#other-typenames"},

                {"include": "#operator"},

                {"include": "#line-comment"},
                {"include": "#block-comment"}
            ]
        },

        "type": {
            "match": "\\b[A-Z]\\w*\\b",
            "name": "support.type.curly"
        },
        "other-typenames": {
            "match": "\\b(?<=enum|ptr)( +)(\\w+)\\b",
            "name": "entity.name.tag"
        },


        "other-keywords": {
            "match": "\\b(let|lambda|in|module|import|as|extern|type|enum|ptr|class)\\b",
            "name": "keyword.other"
        },
        "control-keywords": {
            "match": "\\b(for|some|all|where|pass|stop|if|then|else|match|to)\\b",
            "name": "keyword.control"
        },


        "namespaces": {
            "match": "\\b(\\w+)(\\:\\:)\\b",
            "name": "support.variable.namespace.curly"
        },
        "module-names": {
            "match": "\\b(?<=module|import|as)( +)((\\w|::)+)\\b",
            "name": "support.variable.module.curly"
        },
        "variable-names": {
            "match": "\\b[a-z0-9_]\\w*?\\b",
            "name": "variable.parameter.curly"
        },


        "constants": {
            "match": "\\b(true|false)\\b",
            "name": "constant.language.boolean.curly"
        },
        "string": {
            "begin": "\"",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin"
                }
            },
            "end": "\"",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end"
                }
            },
            "name": "string.quoted.double.curly",
            "patterns": [
                {
                    "match": "\\\\.",
                    "name": "constant.character.escape.curly"
                }
            ]
        },
        "char": {
            "begin": "'",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin"
                }
            },
            "end": "'",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end"
                }
            },
            "name": "string.quoted.single.curly",
            "patterns": [
                {
                    "match": "\\\\.",
                    "name": "constant.character.escape.curly"
                }
            ]
        },
        "numeric": {
            "match": "\\b(0x[0-9a-fA-F]+|0b[01]+|[0-9]+u|[0-9a-fA-F]+h|[01]+b|[0-9]+(\\.[0-9]*([eE][+-]?[0-9]+)?|[eE][+-]?[0-9]+)|[0-9]+)\\b",
            "name": "constant.numeric.curly"
        },


        "purity-annotations" : {
            "match": "@\\b(pure|impure)\\b",
            "name": "meta.tag.purity.curly"
        },


        "operator": {
            "match": "\\*|\\+|\\/|%|-|<=|>=|==|!=|<|>|=|&|\\||\\^|\\.|,|;|\\$|=>|->|\\b(and|or|xor)\\b",
            "name": "keyword.operator"
        },


        "line-comment": {
            "begin": "^#",
            "end": "$",
            "name": "comment.line.number-sign.curly"
        },
        "block-comment": {
            "begin": "{-",
            "end": "-}",
            "name": "comment.block.curly"
        }
    }
}